childnodes
spectrum <- rep(0, m)
for (i in 1:length(descendants)){
spectrum[descendants[i]] <- spectrum[descendants[i]]+lengths[i]
}
spectrum
s = sapply(lengths, function(x) rpois(1, x*mu*L))
pos = sapply(s, function(x) runif(x, min=0, max=L))
mutation = rep(0, length(s))
for(i in length(s):1){
mutation[childnodes[[i]]] = mutation[childnodes[[i]]]+s[i]
}
###Goncalo Abecasis's code: https://csg.sph.umich.edu/abecasis/class/2003/Practical1.html
set.seed(10)
m=5; N=1000; mu=0.001; L=1000
lengths = rep(0,m)
parentnodes = rep(0,m)
childnodes = list()
descendants <- rep(1, m)
activenodes = 1:m
nextNode = m+1
for(k in m:2){
# sample "time to coalescent" from a exponential distribution
# with a mean of 4N/k(k-1)
t = rexp(1, rate=k*(k-1)/4/N)
# all current nodes increase in length by time t
lengths[activenodes] = lengths[activenodes]+t
# sample two nodes to coalesce
coalescence = sample(activenodes, 2)
cat("After ", t, " generations: Nodes ", coalescence[1], " and ", coalescence[2], " coalesce\n")
parentnodes[coalescence]=nextNode
childnodes[[nextNode]]=coalescence
activenodes = c(activenodes[!(activenodes %in% coalescence)], nextNode)
parentnodes[nextNode] = 0
lengths[nextNode] = 0
descendants[nextNode] <- descendants[coalescence[1]] + descendants[coalescence[2]]
nextNode = nextNode+1
}
lengths
parentnodes
activenodes
descendants
childnodes
spectrum <- rep(0, m)
for (i in 1:length(descendants)){
spectrum[descendants[i]] <- spectrum[descendants[i]]+lengths[i]
}
spectrum
s = sapply(lengths, function(x) rpois(1, x*mu*L))
pos = sapply(s, function(x) runif(x, min=0, max=L))
s
mutation = rep(0, length(s))
for(i in length(s):1){
mutation[childnodes[[i]]] = mutation[childnodes[[i]]]+s[i]
}
###Goncalo Abecasis's code: https://csg.sph.umich.edu/abecasis/class/2003/Practical1.html
set.seed(10)
m=5; N=1000; mu=0.001; L=1000
lengths = rep(0,m)
parentnodes = rep(0,m)
childnodes = list()
descendants <- rep(1, m)
activenodes = 1:m
nextNode = m+1
for(k in m:2){
# sample "time to coalescent" from a exponential distribution
# with a mean of 4N/k(k-1)
t = rexp(1, rate=k*(k-1)/4/N)
# all current nodes increase in length by time t
lengths[activenodes] = lengths[activenodes]+t
# sample two nodes to coalesce
coalescence = sample(activenodes, 2)
cat("After ", t, " generations: Nodes ", coalescence[1], " and ", coalescence[2], " coalesce\n")
parentnodes[coalescence]=nextNode
childnodes[[nextNode]]=coalescence
activenodes = c(activenodes[!(activenodes %in% coalescence)], nextNode)
parentnodes[nextNode] = 0
lengths[nextNode] = 0
descendants[nextNode] <- descendants[coalescence[1]] + descendants[coalescence[2]]
nextNode = nextNode+1
}
lengths
parentnodes
activenodes
descendants
childnodes
spectrum <- rep(0, m)
for (i in 1:length(descendants)){
spectrum[descendants[i]] <- spectrum[descendants[i]]+lengths[i]
}
spectrum
s = sapply(lengths, function(x) rpois(1, x*mu*L))
pos = sapply(s, function(x) runif(x, min=0, max=L))
s
mutation = rep(0, length(s))
for(i in length(s):1){
mutation[childnodes[[i]]] = mutation[childnodes[[i]]]+s[i]
}
i=9
mutation = rep(0, length(s))
mutation[childnodes[[i]]]
childnodes[[i]]
mutation[childnodes[[i]]] = mutation[childnodes[[i]]]+s[i]
mutation
i=8
childnodes[[i]]
mutation[childnodes[[i]]] = mutation[childnodes[[i]]]+s[i]
mutation
###Goncalo Abecasis's code: https://csg.sph.umich.edu/abecasis/class/2003/Practical1.html
set.seed(10)
m=5; N=1000; mu=0.001; L=1000
lengths = rep(0,m)
parentnodes = rep(0,m)
childnodes = list()
descendants <- rep(1, m)
activenodes = 1:m
nextNode = m+1
for(k in m:2){
# sample "time to coalescent" from a exponential distribution
# with a mean of 4N/k(k-1)
t = rexp(1, rate=k*(k-1)/4/N)
# all current nodes increase in length by time t
lengths[activenodes] = lengths[activenodes]+t
# sample two nodes to coalesce
coalescence = sample(activenodes, 2)
cat("After ", t, " generations: Nodes ", coalescence[1], " and ", coalescence[2], " coalesce\n")
parentnodes[coalescence]=nextNode
childnodes[[nextNode]]=coalescence
activenodes = c(activenodes[!(activenodes %in% coalescence)], nextNode)
parentnodes[nextNode] = 0
lengths[nextNode] = 0
descendants[nextNode] <- descendants[coalescence[1]] + descendants[coalescence[2]]
nextNode = nextNode+1
}
lengths
parentnodes
activenodes
descendants
childnodes
spectrum <- rep(0, m)
for (i in 1:length(descendants)){
spectrum[descendants[i]] <- spectrum[descendants[i]]+lengths[i]
}
spectrum
s = sapply(lengths, function(x) rpois(1, x*mu*L))
pos = sapply(s, function(x) runif(x, min=0, max=L))
s
mutation = rep(0, length(s))
for(i in length(s):1){
mutation[childnodes[[i]]] = mutation[childnodes[[i]]]+s[i]
print(mutation)
}
###Goncalo Abecasis's code: https://csg.sph.umich.edu/abecasis/class/2003/Practical1.html
set.seed(10)
m=5; N=1000; mu=0.001; L=1000
lengths = rep(0,m)
parentnodes = rep(0,m)
childnodes = list()
descendants <- rep(1, m)
activenodes = 1:m
nextNode = m+1
for(k in m:2){
# sample "time to coalescent" from a exponential distribution
# with a mean of 4N/k(k-1)
t = rexp(1, rate=k*(k-1)/4/N)
# all current nodes increase in length by time t
lengths[activenodes] = lengths[activenodes]+t
# sample two nodes to coalesce
coalescence = sample(activenodes, 2)
cat("After ", t, " generations: Nodes ", coalescence[1], " and ", coalescence[2], " coalesce\n")
parentnodes[coalescence]=nextNode
childnodes[[nextNode]]=coalescence
activenodes = c(activenodes[!(activenodes %in% coalescence)], nextNode)
parentnodes[nextNode] = 0
lengths[nextNode] = 0
descendants[nextNode] <- descendants[coalescence[1]] + descendants[coalescence[2]]
nextNode = nextNode+1
}
lengths
parentnodes
activenodes
descendants
childnodes
spectrum <- rep(0, m)
for (i in 1:length(descendants)){
spectrum[descendants[i]] <- spectrum[descendants[i]]+lengths[i]
}
spectrum
s = sapply(lengths, function(x) rpois(1, x*mu*L))
pos = sapply(s, function(x) runif(x, min=0, max=L))
s
mutation = rep(0, length(s))
for(i in length(s):1){
if(i>m){
mutation[childnodes[[i]]] = mutation[childnodes[[i]]]+s[i]
}else{
mutation[i] = mutation[i]+s[i]
}
print(mutation)
}
i=8
childnodes[[i]]
all.equal(1:4,0)
sum(1:4==0)
###Goncalo Abecasis's code: https://csg.sph.umich.edu/abecasis/class/2003/Practical1.html
set.seed(10)
m=5; N=1000; mu=0.001; L=1000
lengths = rep(0,m)
parentnodes = rep(0,m)
childnodes = list()
descendants <- rep(1, m)
activenodes = 1:m
nextNode = m+1
for(k in m:2){
# sample "time to coalescent" from a exponential distribution
# with a mean of 4N/k(k-1)
t = rexp(1, rate=k*(k-1)/4/N)
# all current nodes increase in length by time t
lengths[activenodes] = lengths[activenodes]+t
# sample two nodes to coalesce
coalescence = sample(activenodes, 2)
cat("After ", t, " generations: Nodes ", coalescence[1], " and ", coalescence[2], " coalesce\n")
parentnodes[coalescence]=nextNode
childnodes[[nextNode]]=coalescence
activenodes = c(activenodes[!(activenodes %in% coalescence)], nextNode)
parentnodes[nextNode] = 0
lengths[nextNode] = 0
descendants[nextNode] <- descendants[coalescence[1]] + descendants[coalescence[2]]
nextNode = nextNode+1
}
lengths
parentnodes
activenodes
descendants
childnodes
spectrum <- rep(0, m)
for (i in 1:length(descendants)){
spectrum[descendants[i]] <- spectrum[descendants[i]]+lengths[i]
}
spectrum
s = sapply(lengths, function(x) rpois(1, x*mu*L))
pos = sapply(s, function(x) runif(x, min=0, max=L))
mutation = s
repeat{
for(i in length(s):(m+1)){
mutation[childnodes[[i]]] = mutation[childnodes[[i]]]+mutation[i]
}
print(mutation)
if(sum(mutation[-1:m]!=0)==0){
break
}
}
mutation
mutation[-(1:3)]
s
mutation = s
mutation
for(i in length(s):(m+1)){
mutation[childnodes[[i]]] = mutation[childnodes[[i]]]+mutation[i]
print(mutation)
}
###Goncalo Abecasis's code: https://csg.sph.umich.edu/abecasis/class/2003/Practical1.html
set.seed(10)
m=5; N=1000; mu=0.001; L=1000
lengths = rep(0,m)
parentnodes = rep(0,m)
childnodes = list()
descendants <- rep(1, m)
activenodes = 1:m
nextNode = m+1
for(k in m:2){
# sample "time to coalescent" from a exponential distribution
# with a mean of 4N/k(k-1)
t = rexp(1, rate=k*(k-1)/4/N)
# all current nodes increase in length by time t
lengths[activenodes] = lengths[activenodes]+t
# sample two nodes to coalesce
coalescence = sample(activenodes, 2)
cat("After ", t, " generations: Nodes ", coalescence[1], " and ", coalescence[2], " coalesce\n")
parentnodes[coalescence]=nextNode
childnodes[[nextNode]]=coalescence
activenodes = c(activenodes[!(activenodes %in% coalescence)], nextNode)
parentnodes[nextNode] = 0
lengths[nextNode] = 0
descendants[nextNode] <- descendants[coalescence[1]] + descendants[coalescence[2]]
nextNode = nextNode+1
}
lengths
parentnodes
activenodes
descendants
childnodes
spectrum <- rep(0, m)
for (i in 1:length(descendants)){
spectrum[descendants[i]] <- spectrum[descendants[i]]+lengths[i]
}
spectrum
s = sapply(lengths, function(x) rpois(1, x*mu*L))
pos = sapply(s, function(x) runif(x, min=0, max=L))
mutation = s
repeat{
for(i in length(s):(m+1)){
mutation[childnodes[[i]]] = mutation[childnodes[[i]]]+mutation[i]
print(mutation)
}
if(sum(mutation[-(1:m)]!=0)==0){
break
}
}
###Goncalo Abecasis's code: https://csg.sph.umich.edu/abecasis/class/2003/Practical1.html
set.seed(10)
m=5; N=1000; mu=0.001; L=1000
lengths = rep(0,m)
parentnodes = rep(0,m)
childnodes = list()
descendants <- rep(1, m)
activenodes = 1:m
nextNode = m+1
for(k in m:2){
# sample "time to coalescent" from a exponential distribution
# with a mean of 4N/k(k-1)
t = rexp(1, rate=k*(k-1)/4/N)
# all current nodes increase in length by time t
lengths[activenodes] = lengths[activenodes]+t
# sample two nodes to coalesce
coalescence = sample(activenodes, 2)
cat("After ", t, " generations: Nodes ", coalescence[1], " and ", coalescence[2], " coalesce\n")
parentnodes[coalescence]=nextNode
childnodes[[nextNode]]=coalescence
activenodes = c(activenodes[!(activenodes %in% coalescence)], nextNode)
parentnodes[nextNode] = 0
lengths[nextNode] = 0
descendants[nextNode] <- descendants[coalescence[1]] + descendants[coalescence[2]]
nextNode = nextNode+1
}
lengths
parentnodes
activenodes
descendants
childnodes
spectrum <- rep(0, m)
for (i in 1:length(descendants)){
spectrum[descendants[i]] <- spectrum[descendants[i]]+lengths[i]
}
spectrum
s = sapply(lengths, function(x) rpois(1, x*mu*L))
pos = sapply(s, function(x) runif(x, min=0, max=L))
mutation = s
mutation
i=9
lengths[i]
childnodes[i]
childnodes[[i]]
mutation[childnodes[[i]]]
for(i in length(mutation):(m+1)){
mutation[childnodes[i]] = mutation[childnodes[[i]]]+lengths[i]
print(mutation)
}
mutation = s
mutation
for(i in length(mutation):(m+1)){
mutation[childnodes[[i]]] = mutation[childnodes[[i]]]+lengths[i]
print(mutation)
}
mutation[1:m]
lengths
s
mutation = s
mutation
for(i in length(mutation):(m+1)){
mutation[childnodes[[i]]] = mutation[childnodes[[i]]]+mutation[i]
print(mutation)
}
mutation[1:m]
length(pos)
head(pos)
length(s)
length(pos)
str(pos)
D0=0.25
plot(0:100, D0*(1-0.05)^(0:100))
D0=0.25
plot(0:100, D0*(1-0.05)^(0:100), type="l")
D0=0.25
plot(0:100, D0*(1-0.05)^(0:100), type="l")
lines(0:100,d0*(1-0.1)^(0:100), type="l", col="blue")
D0=0.25
plot(0:100, D0*(1-0.05)^(0:100), type="l")
lines(0:100,D0*(1-0.1)^(0:100), type="l", col="blue")
D0=0.25
plot(0:100, D0*(1-0.05)^(0:100), type="l")
lines(0:100,D0*(1-0.1)^(0:100), type="l", col="blue")
lines(0:100,D0*(1-0.5)^(0:100), type="l", col="red")
D0=0.25
plot(0:100, D0*(1-0.05)^(0:100), type="l"); text(22,0.1,"c=0.05")
lines(0:100,D0*(1-0.1)^(0:100), type="l", col="blue")
lines(0:100,D0*(1-0.5)^(0:100), type="l", col="red")
D0=0.25
plot(0:100, D0*(1-0.05)^(0:100), type="l"); text(25,0.1,"c=0.05")
lines(0:100,D0*(1-0.1)^(0:100), type="l", col="blue")
lines(0:100,D0*(1-0.5)^(0:100), type="l", col="red")
D0=0.25
plot(0:100, D0*(1-0.05)^(0:100), type="l"); text(25,0.1,"c=0.05")
lines(0:100,D0*(1-0.1)^(0:100), type="l", col="blue"); text(18,0.05,"c=0.1", col="blue")
lines(0:100,D0*(1-0.5)^(0:100), type="l", col="red")
D0=0.25
plot(0:100, D0*(1-0.05)^(0:100), type="l"); text(25,0.1,"c=0.05")
lines(0:100,D0*(1-0.1)^(0:100), type="l", col="blue"); text(20,0.05,"c=0.1", col="blue")
lines(0:100,D0*(1-0.5)^(0:100), type="l", col="red")
D0=0.25
plot(0:100, D0*(1-0.05)^(0:100), type="l"); text(25,0.1,"c=0.05")
lines(0:100,D0*(1-0.1)^(0:100), type="l", col="blue"); text(21,0.05,"c=0.1", col="blue")
lines(0:100,D0*(1-0.5)^(0:100), type="l", col="red")
D0=0.25
plot(0:100, D0*(1-0.05)^(0:100), type="l"); text(25,0.1,"c=0.05")
lines(0:100,D0*(1-0.1)^(0:100), type="l", col="blue"); text(21,0.05,"c=0.1", col="blue")
lines(0:100,D0*(1-0.5)^(0:100), type="l", col="red"); text(10,0.02,"c=0.5", col="blue")
D0=0.25
plot(0:100, D0*(1-0.05)^(0:100), type="l"); text(25,0.1,"c=0.05")
lines(0:100,D0*(1-0.1)^(0:100), type="l", col="blue"); text(21,0.05,"c=0.1", col="blue")
lines(0:100,D0*(1-0.5)^(0:100), type="l", col="red"); text(10,0.02,"c=0.5", col="red")
d = 1:80
plot(d, (10+d)/(22+13*d+d^2))
d = 0:80
plot(d, (10+d)/(22+13*d+d^2))
d = 0:80
plot(d, (10+d)/(22+13*d+d^2), type="l", col="red")
d = 0:80
plot(d, (10+d)/(22+13*d+d^2), type="l", col="red", xlab="distances in 4Nc", ylab="r2")
###Goncalo Abecasis's code: https://csg.sph.umich.edu/abecasis/class/2003/Practical1.html
set.seed(10)
m=5; N=1000; mu=0.001; L=1000
lengths = rep(0,m)
parentnodes = rep(0,m)
childnodes = list()
descendants <- rep(1, m)
activenodes = 1:m
nextNode = m+1
for(k in m:2){
# sample "time to coalescent" from a exponential distribution
# with a mean of 4N/k(k-1)
t = rexp(1, rate=k*(k-1)/4/N)
# all current nodes increase in length by time t
lengths[activenodes] = lengths[activenodes]+t
# sample two nodes to coalesce
coalescence = sample(activenodes, 2)
cat("After ", t, " generations: Nodes ", coalescence[1], " and ", coalescence[2], " coalesce\n")
parentnodes[coalescence]=nextNode
childnodes[[nextNode]]=coalescence
activenodes = c(activenodes[!(activenodes %in% coalescence)], nextNode)
parentnodes[nextNode] = 0
lengths[nextNode] = 0
descendants[nextNode] <- descendants[coalescence[1]] + descendants[coalescence[2]]
nextNode = nextNode+1
}
lengths
parentnodes
activenodes
descendants
childnodes
spectrum <- rep(0, m)
for (i in 1:length(descendants)){
spectrum[descendants[i]] <- spectrum[descendants[i]]+lengths[i]
}
spectrum
s = sapply(lengths, function(x) rpois(1, x*mu*L))
pos = sapply(s, function(x) as.intger(runif(x, min=0, max=L)))
###Goncalo Abecasis's code: https://csg.sph.umich.edu/abecasis/class/2003/Practical1.html
set.seed(10)
m=5; N=1000; mu=0.001; L=1000
lengths = rep(0,m)
parentnodes = rep(0,m)
childnodes = list()
descendants <- rep(1, m)
activenodes = 1:m
nextNode = m+1
for(k in m:2){
# sample "time to coalescent" from a exponential distribution
# with a mean of 4N/k(k-1)
t = rexp(1, rate=k*(k-1)/4/N)
# all current nodes increase in length by time t
lengths[activenodes] = lengths[activenodes]+t
# sample two nodes to coalesce
coalescence = sample(activenodes, 2)
cat("After ", t, " generations: Nodes ", coalescence[1], " and ", coalescence[2], " coalesce\n")
parentnodes[coalescence]=nextNode
childnodes[[nextNode]]=coalescence
activenodes = c(activenodes[!(activenodes %in% coalescence)], nextNode)
parentnodes[nextNode] = 0
lengths[nextNode] = 0
descendants[nextNode] <- descendants[coalescence[1]] + descendants[coalescence[2]]
nextNode = nextNode+1
}
lengths
parentnodes
activenodes
descendants
childnodes
spectrum <- rep(0, m)
for (i in 1:length(descendants)){
spectrum[descendants[i]] <- spectrum[descendants[i]]+lengths[i]
}
spectrum
s = sapply(lengths, function(x) rpois(1, x*mu*L))
pos = sapply(s, function(x) as.integer(runif(x, min=0, max=L)))
mutation = s
mutation
for(i in length(mutation):(m+1)){
mutation[childnodes[[i]]] = mutation[childnodes[[i]]]+mutation[i]
print(mutation)
}
mutation[1:m]
